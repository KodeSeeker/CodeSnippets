
Approach 1:
	If tree balanced then the root is the median !

Approach 2:
	Store in order traversal of the tree in an array and find the median of the array

Approach 3:
	Do an inorder traversal to find out the number of elements (say n)
	Do an inorder traversal again for n/2 times


//Not confident about algo
void Median(struct node *root, int &count, int mid)

{

   if(root!=NULL)

   {

         //If left child exist then handle left

         //child

         Median(root->left, count, mid);

         //When the number of node visited is same as

         //mid element then display the median of the

         //tree

         if(count==mid)

         {

           cout<<Ó\nMedian of BST=Ó<<root->data;

         }

         //If the right child exist then handle

         //right child

         Median(root->right, count, mid);

   }

  

}